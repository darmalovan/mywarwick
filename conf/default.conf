# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play {
  crypto.secret = "changeme"
  i18n.langs = ["en"]

  # Trust all internal IP addresses for X-Forwarded
  http.forwarded.trustedProxies=["137.205.0.0/16", "10.0.0.0/8", "::1", "127.0.0.1"]

  server {
    http {
      port = 8080
      port = ${?http.port}
    }
  }

  modules {
    disabled += "play.api.cache.EhCacheModule"

    enabled += "system.AppModule"
    enabled += "warwick.sso.SSOClientModule"
    enabled += "warwick.objectstore.BlobStoreModule"
    enabled += "com.kenshoo.play.metrics.PlayModule"
    enabled += "com.github.mumoshu.play2.memcached.MemcachedModule"

    cache {
      defaultCache = default
      bindCaches = ["play"]
    }
  }

  mailer {
    host = mailtrap.io
    port = 2525
  }

  filters {
    headers {
      contentSecurityPolicy = ${csp}
    }
    cors {
      pathPrefixes = [
        "/assets/swagger_public.json",
        "/assets/swagger.json"
      ]

      allowedOrigins = [
        "http://www2.warwick.ac.uk",
        "https://www2.warwick.ac.uk"
      ]
    }
  }
}

// This is extended above
csp = "default-src 'self'"
csp = ${csp}"; img-src 'self' https://www.google-analytics.com https://*.warwick.ac.uk"
csp = ${csp}"; style-src 'self' 'unsafe-inline' fonts.googleapis.com"
csp = ${csp}"; font-src 'self' fonts.gstatic.com"
csp = ${csp}"; script-src 'self' 'unsafe-inline' 'unsafe-eval' www.google-analytics.com"
csp = ${csp}"; connect-src 'self' ws: wss:"
csp = ${csp}"; frame-src 'self' https://websignon-test.warwick.ac.uk https://websignon.warwick.ac.uk"
csp = ${csp}"; object-src 'none'"

start {
  departments.root = "https://departments.warwick.ac.uk"
  departments.list.url = ${start.departments.root}"/public/api/department.json"
  search.root = "https://search-dev.warwick.ac.uk"
}

akka {
  # Funnel Akka logging through SLF4J like everything else
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"

  actor.provider = "akka.cluster.ClusterActorRefProvider"
}

metrics {
  # We don't need these, and they also cause exceptions in development
  # where the play-metrics plugin tries to register them twice
  jvm = false
  logback = false
}

quartz {
  job {
    retryWaitSecs = 300
    retryAttempts = 5
  }
}

// Quartz looks up the database via JNDI
db.default.jndiName=db.default

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# play.evolutions.enabled=false

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false

# Enable logback-access
logbackaccess.config.resource = logback-access.xml

# Set Cache-Control headers for static assets
"assets.cache./public/appcache.manifest" = "no-cache"
"assets.cache./public/service-worker.js" = "no-cache"

